
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access2.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    lua_package_path "/usr/local/openresty/nginx/conf/lua-resty-upload/lib/?.lua;;";
    #gzip  on;

    server {
	client_max_body_size 100M;
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
        location /upfile {
            content_by_lua_file myupload.lua;
        }
        location /test {
            content_by_lua '
                ngx.log(ngx.ERR, "start to read content at beginning")
                local upload = require "resty.upload"
                local cjson = require "cjson"
                ngx.log(ngx.ERR, "read helll world")
                local chunk_size = 5 -- should be set to 4096 or 8192
                                     -- for real-world settings

                local form, err = upload:new(chunk_size)
                if not form then
                    ngx.log(ngx.ERR, "failed to new upload: ", err)
                    ngx.exit(500)
                end

                form:set_timeout(1000) -- 1 sec
		string.split = function(s, p)
		    local rt= {}
		    string.gsub(s, "[^"..p.."]+", function(w) table.insert(rt, w) end )
		    return rt
		end

		-- 支持字符串前后 trim
		string.trim = function(s)
		    return (s:gsub("^%s*(.-)%s*$", "%1"))
		end

		-- 文件保存的根路径
		local saveRootPath = "/tmp/"

		-- 保存的文件对象
		local fileToSave

		--文件是否成功保存
		local ret_save = false
		while true do
		    local typ, res, err = form:read()
		    if not typ then
			ngx.log(ngx.ERR, "mytest failed to read: ", err)
			return
		    end
		   if typ == "header" then
			-- 开始读取 http header
			-- 解析出本次上传的文件名
			local key = res[1]
			local value = res[2]
			if key == "Content-Disposition" then
			    -- 解析出本次上传的文件名
			    -- form-data; name="testFileName"; filename="testfile.txt"
			    local kvlist = string.split(value, ";")
			    for _, kv in ipairs(kvlist) do
				local seg = string.trim(kv)
				if seg:find("filename") then
				    local kvfile = string.split(seg, "=")
				    local filename = string.sub(kvfile[2], 2, -2)
				    ngx.log(ngx.ERR, "filename : " .. filename)
				    local fullpath = saveRootPath .. filename
				    ngx.log(ngx.ERR, "fullpath : " .. fullpath)
				    if filename then
					fileToSave = io.open(saveRootPath .. filename, "w+")
					if not fileToSave then
					    ngx.log(ngx.ERR, "mytest failed to open file : " .. filename)
					    return
					end
					break
				    end
				end
			    end
			end
		    elseif typ == "body" then
			-- 开始读取 http body
			if fileToSave then
			    fileToSave:write(res)
			end
		    elseif typ == "part_end" then
			-- 文件写结束，关闭文件
			if fileToSave then
			    fileToSave:close()
			    fileToSave = nil
			end
			
			ret_save = true
		    elseif typ == "eof" then
			-- 文件读取结束
			break
		    else
			ngx.log(ngx.INFO, "mytest do other things")
		    end
		end
--                while true do
--                    local typ, res, err = form:read()
--                    if not typ then
--			ngx.log(ngx.ERR, "failed to read:", err)
--                        return
--                    end
--
--	            ngx.log(ngx.ERR, "read:" .. cjson.encode({typ, res}))
--
--                    if typ == "eof" then
--                        break
--                    end
--                end
--
--                local typ, res, err = form:read()
--	        ngx.log(ngx.ERR, "read:" .. cjson.encode({typ, res}))
            ';
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
